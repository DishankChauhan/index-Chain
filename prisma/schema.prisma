datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]
  dbConnections DatabaseConnection[]
  indexingJobs  IndexingJob[]
  webhooks      Webhook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DatabaseConnection {
  id              String    @id @default(cuid())
  userId          String
  host            String
  port            Int
  database        String
  username        String
  password        String
  status          String    @default("pending")
  lastConnectedAt DateTime?
  metadata        Json?     @default("{}") @db.JsonB
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJobs    IndexingJob[]

  @@index([userId])
}

model IndexingJob {
  id              String    @id @default(cuid())
  userId          String
  dbConnectionId  String
  type            String
  config          Json
  status          String    @default("pending")
  progress        Float       @default(0)
  lastRunAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  databaseConnection DatabaseConnection @relation(fields: [dbConnectionId], references: [id], onDelete: Cascade)
  webhooks        Webhook[]
  processedData   ProcessedData[]

  @@index([userId])
  @@index([dbConnectionId])
  @@index([type])
  @@index([status])
}

model Webhook {
  id              String      @id @default(cuid())
  indexingJobId   String
  userId          String
  url             String
  secret          String
  retryCount      Int        @default(3)
  retryDelay      Int        @default(1000)
  heliusWebhookId String
  filters         Json       @default("{}")
  status          String     @default("active")
  config          Json?      @default("{\"rateLimit\":{\"windowMs\":60000,\"maxRequests\":60}}")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  logs            WebhookLog[]
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  indexingJob     IndexingJob @relation(fields: [indexingJobId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([indexingJobId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String
  status    String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 

model WebhookLog {
  id         String   @id @default(cuid())
  webhookId  String
  status     String
  attempt    Int
  payload    Json
  response   Json?
  error      String?
  timestamp  DateTime @default(now())
  webhook    Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId])
  @@index([timestamp])
}

model ProcessedData {
  id        String   @id @default(cuid())
  jobId     String
  data      Json
  timestamp DateTime @default(now())
  job       IndexingJob @relation(fields: [jobId], references: [id])

  @@index([jobId])
  @@index([timestamp])
}

model Aggregation {
  id        String   @id @default(cuid())
  type      String
  field     String
  value     Json
  timestamp DateTime @default(now())

  @@index([type, field])
  @@index([timestamp])
} 